/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ergasiapsifiakesepikinonies;

import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author georkirm
 */
public class GUIergasias extends javax.swing.JFrame {
    
    private boolean oneMessageB=false;
    private String oneMessageS;
    private boolean compoBolean= false;
    /**
     * Creates new form GUIergasias
     */
    public GUIergasias() {
        initComponents();
        setLocationRelativeTo(null);
        resetB.setEnabled(false); //just GUI things.. nothing of any importance
        newMessageL.addItem("Press \"ok\" button to culculate the messages");
        oldMessageL.addItem("Press \"ok\" button to culculate the messages");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelForPL = new javax.swing.JLabel();
        nymberOfMessagesT = new javax.swing.JTextField();
        textForPT = new javax.swing.JTextField();
        randomOfNumberOfMessagesB = new javax.swing.JButton();
        radnomOfPB = new javax.swing.JButton();
        okB = new javax.swing.JButton();
        missRateL = new javax.swing.JLabel();
        errorSp = new javax.swing.JSpinner();
        numberOfBitsT = new javax.swing.JTextField();
        randomOfNumberOfBitsB = new javax.swing.JButton();
        newMessageL = new javax.swing.JComboBox();
        errorsFoundT = new javax.swing.JTextField();
        oldMessageL = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        resetB = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        errorsFoundByCRCT = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        errorsNotFoundByCRCT = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileM = new javax.swing.JMenu();
        oneMessageOkB = new javax.swing.JMenuItem();
        quitB = new javax.swing.JMenuItem();
        moreM = new javax.swing.JMenu();
        helpB = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        aboutB = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 254));
        setResizable(false);

        labelForPL.setText("The P number:");

        nymberOfMessagesT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nymberOfMessagesTKeyTyped(evt);
            }
        });

        textForPT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textForPTKeyTyped(evt);
            }
        });

        randomOfNumberOfMessagesB.setText("Random");
        randomOfNumberOfMessagesB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomOfNumberOfMessagesBActionPerformed(evt);
            }
        });

        radnomOfPB.setText("Random");
        radnomOfPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radnomOfPBActionPerformed(evt);
            }
        });

        okB.setText("OK");
        okB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBActionPerformed(evt);
            }
        });

        missRateL.setText("Miss Rate %");

        errorSp.setModel(new javax.swing.SpinnerNumberModel(1.23d, 0.0d, 100.0d, 0.01d));
        errorSp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                errorSpKeyTyped(evt);
            }
        });

        numberOfBitsT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberOfBitsTKeyTyped(evt);
            }
        });

        randomOfNumberOfBitsB.setText("Random");
        randomOfNumberOfBitsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomOfNumberOfBitsBActionPerformed(evt);
            }
        });

        newMessageL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMessageLActionPerformed(evt);
            }
        });

        errorsFoundT.setEditable(false);

        oldMessageL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldMessageLActionPerformed(evt);
            }
        });

        jLabel1.setText("Old message after CRC:");

        jLabel2.setText("New message with errors:");

        jLabel3.setText("Errors  from all messages:");

        jLabel4.setText("Number of Messages:");

        jLabel5.setText("Number of bits for each message:");

        resetB.setText("Reset");
        resetB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBActionPerformed(evt);
            }
        });

        jLabel6.setText("Errors that CRC detects:");

        errorsFoundByCRCT.setEditable(false);

        jLabel7.setText("Errors that CRC didnt detect:");

        errorsNotFoundByCRCT.setEditable(false);

        fileM.setText("File");

        oneMessageOkB.setText("Run CRC for speciffic message");
        oneMessageOkB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneMessageOkBActionPerformed(evt);
            }
        });
        fileM.add(oneMessageOkB);

        quitB.setText("Quit");
        quitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBActionPerformed(evt);
            }
        });
        fileM.add(quitB);

        jMenuBar1.add(fileM);

        moreM.setText("More");

        helpB.setText("Help");
        helpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBActionPerformed(evt);
            }
        });
        moreM.add(helpB);

        jMenuItem1.setText("Known bugs");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        moreM.add(jMenuItem1);

        aboutB.setText("About");
        aboutB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBActionPerformed(evt);
            }
        });
        moreM.add(aboutB);

        jMenuBar1.add(moreM);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oldMessageL, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newMessageL, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(missRateL, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorSp, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(errorsFoundByCRCT)
                                    .addComponent(errorsNotFoundByCRCT)
                                    .addComponent(errorsFoundT, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelForPL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(okB, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(resetB, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(numberOfBitsT)
                                                .addComponent(nymberOfMessagesT, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(textForPT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(radnomOfPB)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(randomOfNumberOfBitsB, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(randomOfNumberOfMessagesB, javax.swing.GroupLayout.Alignment.TRAILING)))))))
                        .addGap(8, 8, 8))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nymberOfMessagesT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomOfNumberOfMessagesB)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(numberOfBitsT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomOfNumberOfBitsB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelForPL)
                    .addComponent(textForPT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radnomOfPB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(missRateL)
                    .addComponent(errorSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okB)
                    .addComponent(resetB))
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oldMessageL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(newMessageL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(errorsFoundT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(errorsFoundByCRCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(errorsNotFoundByCRCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitBActionPerformed

    private void helpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBActionPerformed
        JOptionPane.showMessageDialog(null, ""
                + "Put the number of messages in the first field,"
                + "\nthe number of bits for each message on second,"
                + "\nand the divisor on the 3rd."
                + "\nYou can press the \"Random\" button to fill the"
                + "\nfields with random numbers."
                + "\n\nYou can put the error rate you want the messages"
                + "\nto get after CRC. The default value is 1.23."
                + "\nPress \"ok\" to run the program and \"reset\" to"
                + "\nempty the fields and try for different values"
                + "\n\nThe first compoBox is the message after crc before"
                + "\nerrors and on the second it is with the errors,"
                + "\nchose one and the other will automatically chosen."
                + "\n\nOn the last 3 text fields there is the number of"
                + "\nthe messages with errors, the number of the messages"
                + "\nthat CRC find with errors and how many messages with"
                + "\nerrors CRC did not found."
                + "\n"
                + "\nIf the user want he can run the CRC code only for"
                + "\none message (File->Run...)", "Help message", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_helpBActionPerformed

    private void aboutBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutBActionPerformed
        JOptionPane.showMessageDialog(null, "Ergasia stis Psifiakes Epikinonies.\n"
                + "Georgios Kirmitsakis\nAEM: 2449", "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutBActionPerformed

    private void radnomOfPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radnomOfPBActionPerformed
        String genitorasS = randomButtonAction(999,true); //gets a random binary number that equals from 0 to 999
        textForPT.setText(genitorasS);
    }//GEN-LAST:event_radnomOfPBActionPerformed

    private void randomOfNumberOfMessagesBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomOfNumberOfMessagesBActionPerformed
        String numberOfMessagesS= randomButtonAction(9999,false); //
        nymberOfMessagesT.setText(numberOfMessagesS);
    }//GEN-LAST:event_randomOfNumberOfMessagesBActionPerformed

    private void nymberOfMessagesTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nymberOfMessagesTKeyTyped
        char c=evt.getKeyChar(); //get input from text field character by character
        if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))){
            getToolkit().beep(); //consume them if they are not numbers
            evt.consume();
        }
    }//GEN-LAST:event_nymberOfMessagesTKeyTyped

    private void textForPTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textForPTKeyTyped
        char c=evt.getKeyChar(); //get input from text field character by character
        if (!((c >= '0') && (c <= '1') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))){
            getToolkit().beep(); //consume them if they are not binary numbers
            evt.consume();
        }
    }//GEN-LAST:event_textForPTKeyTyped

    private void okBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBActionPerformed
        okB.setEnabled(false); //lock everything on GUI
        resetB.setEnabled(true);
        nymberOfMessagesT.setEditable(false);
        numberOfBitsT.setEditable(false);
        textForPT.setEditable(false);
        errorSp.setEnabled(false);
        randomOfNumberOfMessagesB.setEnabled(false);
        randomOfNumberOfBitsB.setEnabled(false);
        radnomOfPB.setEnabled(false);
        boolean runThatB=true;
        if(oneMessageB==false){ //if use wants to run with many messages
            //if text fields are null then give them random values
            if(textForPT.getText().equals("")||nymberOfMessagesT.getText().equals("")||numberOfBitsT.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Fields are empty, they will get random numbers.", 
                        "Error message", JOptionPane.PLAIN_MESSAGE);
                if(textForPT.getText().equals("")){
                    radnomOfPBActionPerformed(evt);
                }
                if(nymberOfMessagesT.getText().equals("")){
                    randomOfNumberOfMessagesBActionPerformed(evt);
                }
                if(numberOfBitsT.getText().equals("")){
                    randomOfNumberOfBitsBActionPerformed(evt);
                }
            }
            //check if the fields have to big numbers and inform the user
            if((Integer.parseInt(nymberOfMessagesT.getText())*Integer.parseInt(numberOfBitsT.getText()))>=1000000){
                int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to run with that numbers?"
                                                          + "\nThis will take some time!"
                                                          + "\n(if press no it will reset the fields)", 
                                                            "Security message", JOptionPane.YES_NO_OPTION);
                if (n == JOptionPane.YES_OPTION) {
                    runThatB= true; //True if he wants to run it with that numbers
                } else if (n == JOptionPane.NO_OPTION) {
                    reseterer(); //<- this resets the fields
                    runThatB= false;
                }
            }
        }
        if(runThatB==true){
            double errorRateI = (double) errorSp.getValue();
            oldMessageL.removeItemAt(0); //remove the entry that has been field on constructor to prevent NULL exceptions
            newMessageL.removeItemAt(0);
            int countOfRightMessagesByUsingCRC=0; //counts the messages that accually have errors
            int countOfRightMessagesByCheckigTheArrays=0; //name may or may not be missleading
            int countOfMissesByCRC=0; //counts how much messages with errors the CRC didnt find
            for(int i=0; i<=Integer.parseInt(nymberOfMessagesT.getText())-1; i++){
                String messagesToBeSentS=""; 
                if(!oneMessageB){
                    //creat the message that needed to be sent but running the random for each bit
                    for (int j = 0; j < Integer.parseInt(numberOfBitsT.getText()); j++) {
                        messagesToBeSentS = messagesToBeSentS+randomButtonAction(2, true);
                    }
                }else{ //if user wants to put a specific message
                    messagesToBeSentS= oneMessageS;
                }
                MyClass temp = new MyClass(messagesToBeSentS,textForPT.getText(),errorRateI);
                //.doCRC checks if message has errors by devide the sended message with the divisor and check if 0
                if(temp.doCRC()!=true){ 
                    countOfRightMessagesByUsingCRC++;
                }
                //.checkerMessager checks message after CRC before getting errors with message after getting them bit by bit
                if(temp.checkerMessager()!=true){
                    countOfRightMessagesByCheckigTheArrays++;
                }
                String ss= ""; //add to compoBox the starting message
                for(int ii=0; ii<=((temp.stalmenoMinimaXorisErrorsI.length)-(textForPT.getText().length()));ii++){
                    ss=ss+Integer.toString(temp.stalmenoMinimaXorisErrorsI[ii]);
                }
                ss= ss+"-";//after this add the CRC remain -last bit
                for(int ii=((temp.stalmenoMinimaXorisErrorsI.length)-(textForPT.getText().length())+1); ii<=(temp.stalmenoMinimaXorisErrorsI.length-1);ii++){
                    ss=ss+Integer.toString(temp.stalmenoMinimaXorisErrorsI[ii]);
                }
                oldMessageL.addItem((i+1)+". "+ss);
                String s= "";
                for(int ii=0; ii<=((temp.stalmenoMinimaXorisErrorsI.length)-(textForPT.getText().length()));ii++){
                    s=s+Integer.toString(temp.stalmenoMinimaMeErrorsI[ii]);
                }
                s= s+"-";
                for(int ii=((temp.stalmenoMinimaXorisErrorsI.length)-(textForPT.getText().length())+1); ii<=(temp.stalmenoMinimaXorisErrorsI.length-1);ii++){
                    s=s+Integer.toString(temp.stalmenoMinimaMeErrorsI[ii]);
                }
                newMessageL.addItem((i+1)+". "+s);
                compoBolean= true;
            }
            double helper1I=(double) countOfRightMessagesByCheckigTheArrays;
            double helper2I=(double) Integer.parseInt(nymberOfMessagesT.getText());
            double helper0I= (helper1I*100) / helper2I;
            errorsFoundT.setText(countOfRightMessagesByCheckigTheArrays+" sented with errors from "+nymberOfMessagesT.getText()+
                    " || "+helper0I+"%");
            String wasWhereS="were";
            if(countOfRightMessagesByUsingCRC==1){
                wasWhereS="was";
            }
            helper1I=(double) countOfRightMessagesByUsingCRC;
            helper2I=(double) Integer.parseInt(nymberOfMessagesT.getText());
            helper0I= (helper1I*100) / helper2I;
            errorsFoundByCRCT.setText(countOfRightMessagesByUsingCRC+" "+wasWhereS+" "
                    + "detected by CRC from "+nymberOfMessagesT.getText()+" || "+helper0I+"%");
            countOfMissesByCRC= countOfRightMessagesByCheckigTheArrays-countOfRightMessagesByUsingCRC;
            wasWhereS="were";
            if(countOfMissesByCRC==1){
                wasWhereS="was";
            }
            helper1I=(double) countOfMissesByCRC;
            helper2I=(double) countOfRightMessagesByCheckigTheArrays;
            helper0I= (helper1I*100) / helper2I;
            errorsNotFoundByCRCT.setText(countOfMissesByCRC+" "+wasWhereS+" "
                    + "where not detected by CRC from "+countOfRightMessagesByCheckigTheArrays+" || "+helper0I+"%");
        }
        
    }//GEN-LAST:event_okBActionPerformed

    private void errorSpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_errorSpKeyTyped
        char c=evt.getKeyChar(); //get input from text field character by character
        if (!((c >= '0') && (c <= '1') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) 
        {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_errorSpKeyTyped

    private void numberOfBitsTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberOfBitsTKeyTyped
        char c=evt.getKeyChar(); //get input from text field character by character
        if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_numberOfBitsTKeyTyped

    private void randomOfNumberOfBitsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomOfNumberOfBitsBActionPerformed
        String numberOfBitsForEachMessageS= randomButtonAction(74,false);
        numberOfBitsT.setText(numberOfBitsForEachMessageS);
    }//GEN-LAST:event_randomOfNumberOfBitsBActionPerformed

    private void oldMessageLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldMessageLActionPerformed
        //when select a message it auto-selects the right message from the other compobox
        if((oldMessageL.getSelectedIndex()!=-1)&&(oldMessageL.getSelectedIndex()!=0)){
            newMessageL.setSelectedIndex(oldMessageL.getSelectedIndex());
        }
        if((oldMessageL.getSelectedIndex()==0)&&(compoBolean==true)){
            newMessageL.setSelectedIndex(0);
        }
    }//GEN-LAST:event_oldMessageLActionPerformed

    private void newMessageLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMessageLActionPerformed
        //when select a message it auto-selects the right message from the other compobox
        if ((newMessageL.getSelectedIndex()!=-1)&&(newMessageL.getSelectedIndex()!=0)) {
            oldMessageL.setSelectedIndex(newMessageL.getSelectedIndex());
        }
        if((newMessageL.getSelectedIndex()==0)&&(compoBolean==true)){
            oldMessageL.setSelectedIndex(0);
        }
            
    }//GEN-LAST:event_newMessageLActionPerformed

    private void resetBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBActionPerformed

        reseterer(); //resets everthing
    }//GEN-LAST:event_resetBActionPerformed

    private void oneMessageOkBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneMessageOkBActionPerformed
        GUIforOneMessage temp= new GUIforOneMessage();
        temp.setLocationRelativeTo(null);
        temp.setVisible(true);
        //hide();
        setEnabled(false);
        setVisible(false);
    }//GEN-LAST:event_oneMessageOkBActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, ""
                  + "1. For extrimilly high numbers of"
                + "\nnumberOfMessages and numberOfBits"
                + "\nthe program will not inform the user"
                + "\n2. Some times the last text field is too"
                + "\nsmall to show the user the whole string"
                + "\n3. If number of is bits too big, the user"
                + "\ncant see the whole messages in compoBox"
                + "\n4. You can copy paste random text in"
                + "\nthe fields and crash the program"
                + "\n5. For even bigger numbers than 1st"
                + "\nbug the program will crush"
                + "\ncrashes", "Known bugs", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void reseterer(){ //resets GUI
        compoBolean= false;
        oneMessageB= false;
        getContentPane().removeAll();
        getContentPane().repaint();
        initComponents();
        resetB.setEnabled(false);
        newMessageL.addItem("Press \"ok\" button to culculate the messages");
        oldMessageL.addItem("Press \"ok\" button to culculate the messages");
    }
    
    //give random number if isBinary false or return one bit (0 or 1) if its true
    private String randomButtonAction(int j, boolean isBinary){ 
        Random rand = new Random();
        int i = rand.nextInt(j);
        String s;
        if(isBinary==true){
            s = Integer.toBinaryString(i);
        }else{
            s= Integer.toString(i);
        }
        return s;
    }
        
    public void getter(java.awt.event.ActionEvent evt, String messageS, String numberOfBitsI, String devisorS, double errorRateD){
        nymberOfMessagesT.setText("1");
        numberOfBitsT.setText(numberOfBitsI);
        textForPT.setText(devisorS);
        errorSp.setValue(errorRateD);
        oneMessageB= true;
        oneMessageS= messageS;
        okBActionPerformed(evt);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIergasias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIergasias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIergasias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIergasias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIergasias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutB;
    private javax.swing.JSpinner errorSp;
    private javax.swing.JTextField errorsFoundByCRCT;
    private javax.swing.JTextField errorsFoundT;
    private javax.swing.JTextField errorsNotFoundByCRCT;
    private javax.swing.JMenu fileM;
    private javax.swing.JMenuItem helpB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel labelForPL;
    private javax.swing.JLabel missRateL;
    private javax.swing.JMenu moreM;
    private javax.swing.JComboBox newMessageL;
    private javax.swing.JTextField numberOfBitsT;
    private javax.swing.JTextField nymberOfMessagesT;
    private javax.swing.JButton okB;
    private javax.swing.JComboBox oldMessageL;
    private javax.swing.JMenuItem oneMessageOkB;
    private javax.swing.JMenuItem quitB;
    private javax.swing.JButton radnomOfPB;
    private javax.swing.JButton randomOfNumberOfBitsB;
    private javax.swing.JButton randomOfNumberOfMessagesB;
    private javax.swing.JButton resetB;
    private javax.swing.JTextField textForPT;
    // End of variables declaration//GEN-END:variables
}
